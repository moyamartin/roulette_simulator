/**********************************************************************
*
* @file		roulette_bets.cpp
* @brief	Contains the definition of Roulette's type of simple bets
* @version	v1.01f00
* @date		5. Jul. 2020
* @author	Martin Moya
*
**********************************************************************/
#include <iostream>

#include "roulette_bets.hpp"

/* 
 * Initializes the simple_bets_result map to -1 indicating that the next roll is
 * the first one
 */
std::map<RouletteBets::simple_bets_t, int> RouletteBets::simple_bets_result = {
	{EVEN, -1},
	{ODD, -1},
	{RED, -1},
	{BLACK, -1},
	{HIGH, -1},
	{LOW, -1},
	{VALUE, -1}
};

int RouletteBets::getResult(simple_bets_t value)
{
	return simple_bets_result[value];
}

void RouletteBets::setResult(int random_number)
{
	// Stores the random value generated by Roulette
	simple_bets_result[VALUE] = random_number;
	// Roulette first resets the map calling resetResult
	/* if random_number is zero then it does not updates the values
	 * indicating that everyone has lost
	 */
	if(random_number > 0) {
		// First check if the number is even or not and updates the EVEN and ODD
		// values in simple_bet_result
		simple_bets_result[EVEN] = (random_number%2 == 0);
		simple_bets_result[ODD] = !simple_bets_result[EVEN];

		// The numbers on the roulette are separated by HIGH or LOW if it is
		// bigger or not than 19
		simple_bets_result[LOW] = (random_number < 19);
		simple_bets_result[HIGH] = !simple_bets_result[LOW];

		/*
		 * If the number is LOW or HIGH and less or equal than 10 or 28 
		 * (respectively) then the EVEN numbers are BLACK and the ODD numbers
		 * are RED
		 * If the numbers is LOW or HIGH and higher than 10 or 28 (respectively)
		 * then the ODD numbers are BLACK and the EVEN numbers are RED
		 * Please check the color scheme of the table on the README for a better
		 * explanation
		 */
		if((simple_bets_result[LOW] && random_number <= 10) ||
				(simple_bets_result[HIGH] && random_number <= 28)){
			simple_bets_result[BLACK] = simple_bets_result[EVEN];
		} else {
			simple_bets_result[BLACK] = simple_bets_result[ODD];
		}
		simple_bets_result[RED] = !simple_bets_result[BLACK];
	}
}

void RouletteBets::resetResult()
{
	// Iterates over all the values of the map and sets them to zero
	for(std::map<simple_bets_t, int>::iterator it = 
			simple_bets_result.begin();
			it != simple_bets_result.end(); it++) {
		it->second = 0;
	}
}

void RouletteBets::printResult()
{
	std::cout << "{" << std::endl;
	std::cout << "'RouletteResult': {" << std::endl;
	std::map<simple_bets_t, int>::iterator it = simple_bets_result.begin();
	std::cout << "\t'" << printBet(it->first) 
		<< "': "<< it->second;
	for(std::map<simple_bets_t, int>::iterator itt = ++it; 
			itt != simple_bets_result.end(); itt++) {
		std::cout << "," << std::endl << "\t'"
			<< printBet(itt->first) << "': " << itt->second;
	}

	std::cout << std::endl << "\t}" << std::endl << "}" << std::endl;
}

std::string RouletteBets::printBet(simple_bets_t value)
{
	switch(value) {
		case EVEN:	return "EVEN";
		case ODD:	return "ODD";
		case RED:	return "RED";
		case BLACK:	return "BLACK";
		case HIGH:	return "HIGH";
		case LOW:	return "LOW";
		case VALUE:	
		default:	return "VALUE";
	}
}
